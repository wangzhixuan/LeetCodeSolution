class Solution:
    # @param x, an integer
    # @return an integer
    def sqrt(self, x):
        if (x<100):
            for number in range(10):
                if (number+1)*(number+1)>x:
                    return number
        # use different logbase to reduce the searching space
		# however logbase = [2] uses 232ms
		# logbase = [2,3] uses 340ms
		# logbase = [2,3,5,6,7] uses 344ms
		# it seems that the searching strategy is good enough so no need to further reduce the searching  space
        logbase=[2]
        num_trial = len(logbase)
        test = [0] * (num_trial)
        test2 = [0] * (num_trial)
        i=0

        for base in logbase:
            test[i] = base
            test2[i] = base*base
            while(test2[i]*test2[i]<=x):
                if (test2[i]==x):
                    return test[i]
                test[i] = test2[i]
                test2[i] = test[i] * test[i]
                
            i += 1    
                    
        lowerbound=max(test)
        higherbound=min(test2)
        
        start = lowerbound
        end = higherbound
        num_interval = 10
        
		#	Divide the space into intervals with "num_interval"
		#	num_interval is also adjustable.
		#   In principal, the time cost is optimized when num_interval=3 
		#   However, leetcode website gives the minimum running time with num_interval = 10
        while True:
            interval = max((end-start)/num_interval+1, 1)
            number = start
            while (number < end): 
                number += interval
                testsq = number*number
                if (testsq ==x):
                    return number
                elif (testsq >x):
                    if (interval==1):
                        return number-1
                    start = number-interval
                    end = number
                    break

