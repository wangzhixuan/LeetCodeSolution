#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#Sol1: 104 ms

# Definition for a  binary tree node
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
def isLeaf(p):
    if (p==None):
        return False
        
    return ((p.left==None) and (p.right==None))

def isSameTree2(p, q):
    if (p==None):
        return (q==None)
    else:
        if (q==None):
            return False
            
    if (p.val != q.val):
        return False

    if isLeaf(p):
        if isLeaf(q):
            return (p.val == q.val)
        else:
            return False
    else:
        if isLeaf(q):
            return False
        else:
            if isSameTree2(p.left,q.left):
                return isSameTree2(p.right,q.right)
            else:
                return False 


class Solution:
    # @param p, a tree node
    # @param q, a tree node
    # @return a boolean
    def isSameTree(self, p, q):
        return isSameTree2(p,q)

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#Sol1: 172 ms

# Definition for a  binary tree node
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

def isSameTree2(p, q):
    if (p==None) or (q==None):
        return (q==p)
            
    if (p.val != q.val):
        return False
    else:
        if isSameTree2(p.left,q.left):
            return isSameTree2(p.right,q.right)
        else:
            return False 


class Solution:
    # @param p, a tree node
    # @param q, a tree node
    # @return a boolean
    def isSameTree(self, p, q):
        return isSameTree2(p,q)
        
		
		
#	Checking whether it is a leaf makes the code more complicated, but gain some efficiency
#	Kind of Breadth-first out performs depth-first?
#
		